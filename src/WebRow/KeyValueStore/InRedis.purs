module KeyValueStore.InRedis where

-- type RedisStore a = DataStore Aff a
-- 
-- type RedisStoreConfig =
--   { connection ∷ Redis.Connection
--   , namespace ∷ String
--   , expiration ∷ Maybe Int
--   }
-- 
-- -- | XXX:
-- -- | * Replace ReadForeign / WriteForeign with EncodeJson / DecodeJson
-- redisStore
--   ∷ ∀ a
--   . ReadForeign a
--   ⇒ WriteForeign a
--   ⇒ RedisStoreConfig
--   → RedisStore a
-- redisStore config = { create, delete, get, set }
--   where
--   toKey k = toUTF8 $ config.namespace <> "." <> k
--   toValue a = toUTF8 <<< writeJSON $ a
-- 
--   create = show <$> liftEffect genUUID
--   delete key = del' config.connection [toKey key]
--   get key = do
--     v ← Redis.get config.connection (toKey key)
--     pure $ v >>= (fromUTF8 >>> readJSON >>> hush)
--   set key a =
--     Redis.set
--       config.connection
--       (toKey key)
--       (toValue a)
--       (Redis.EX <$> config.expiration)
--       Nothing
